using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Persistence.Migrations
{
    /// <inheritdoc />
    public partial class returnDB : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 91, 129, 166, 142, 109, 179, 126, 48, 61, 11, 193, 175, 239, 169, 221, 133, 30, 58, 181, 208, 203, 168, 93, 139, 149, 244, 116, 0, 247, 215, 102, 18, 65, 117, 13, 13, 144, 222, 111, 240, 0, 223, 2, 33, 51, 19, 101, 93, 195, 129, 188, 175, 192, 236, 17, 223, 58, 248, 110, 6, 20, 122, 77, 15 }, new byte[] { 64, 62, 253, 34, 172, 58, 109, 109, 44, 7, 144, 136, 41, 36, 50, 123, 36, 87, 28, 215, 213, 237, 143, 41, 41, 41, 19, 167, 202, 79, 42, 172, 176, 84, 182, 204, 137, 43, 206, 37, 53, 97, 247, 40, 128, 136, 93, 237, 163, 198, 37, 158, 235, 254, 99, 171, 25, 166, 230, 152, 226, 221, 173, 179, 209, 251, 123, 116, 70, 147, 209, 176, 88, 13, 108, 25, 61, 128, 238, 131, 118, 43, 84, 108, 113, 122, 157, 248, 53, 166, 15, 142, 71, 0, 253, 198, 169, 80, 145, 71, 108, 188, 169, 68, 157, 213, 123, 102, 188, 69, 227, 58, 100, 94, 227, 8, 65, 101, 103, 113, 138, 135, 202, 17, 188, 115, 194, 102 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 181, 84, 200, 68, 20, 135, 133, 171, 206, 101, 246, 109, 129, 81, 2, 133, 173, 21, 191, 18, 227, 31, 106, 30, 223, 139, 240, 132, 147, 211, 54, 188, 195, 204, 71, 251, 165, 123, 174, 8, 171, 175, 142, 167, 95, 132, 237, 90, 131, 23, 167, 215, 219, 189, 100, 73, 173, 232, 150, 178, 28, 2, 95, 206 }, new byte[] { 239, 9, 134, 231, 31, 53, 1, 190, 15, 243, 96, 63, 176, 254, 201, 208, 85, 16, 241, 28, 161, 166, 177, 147, 236, 11, 140, 199, 56, 59, 79, 46, 97, 152, 18, 126, 114, 250, 211, 168, 176, 32, 50, 148, 64, 15, 229, 217, 109, 25, 182, 172, 83, 249, 168, 8, 13, 168, 102, 221, 81, 207, 63, 118, 27, 13, 206, 189, 89, 20, 158, 132, 4, 32, 203, 54, 28, 217, 226, 167, 28, 12, 93, 185, 163, 100, 161, 8, 68, 160, 30, 255, 205, 36, 93, 183, 240, 92, 156, 22, 93, 123, 140, 246, 111, 225, 253, 34, 80, 182, 93, 208, 97, 7, 67, 156, 28, 234, 90, 13, 19, 49, 209, 239, 216, 25, 75, 77 } });
        }
    }
}
